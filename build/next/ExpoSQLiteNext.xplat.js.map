{"version":3,"file":"ExpoSQLiteNext.xplat.js","sourceRoot":"","sources":["../../src/next/ExpoSQLiteNext.xplat.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeDatabase, SQLiteOpenOptions } from \"./NativeDatabase\";\nimport {\n  NativeStatement,\n  SQLiteAnyDatabase,\n  SQLiteBindBlobParams,\n  SQLiteBindPrimitiveParams,\n  SQLiteColumnNames,\n  SQLiteColumnValues,\n  SQLiteRunResult,\n} from \"./NativeStatement\";\nimport initWasm, { DB } from \"@vlcn.io/crsqlite-wasm\";\n\nimport { StmtAsync } from \"@vlcn.io/xplat-api\";\n\n// const stmtAsyncToNativeStatement = async ({\n//   run,\n//   get,\n//   all,\n//   iterate,\n//   raw,\n//   bind,\n//   finalize,\n// }: StmtAsync): Promise<NativeStatement> => ({\n//   runAsync: run,\n//   stepAsync: iterate,\n//   getAllAsync: all,\n//   resetAsync: () => Promise.resolve(),\n//   getColumnNamesAsync: () => Promise.resolve([]),\n//   finalizeAsync: finalize,\n// });\n\nconst CrSqliteDatabase = class CrSqliteDatabase implements NativeDatabase {\n  #databaseName: string;\n  #options?: SQLiteOpenOptions;\n  #db?: DB;\n\n  constructor(databaseName: string, options?: SQLiteOpenOptions) {\n    this.#databaseName = databaseName;\n    this.#options = options;\n    console.log(\"NativeDatabase\", databaseName, options);\n  }\n\n  //#region Asynchronous API\n\n  public async initAsync(): Promise<void> {\n    // const sqlite = await initWasm(() => wasmUrl);\n    const sqlite = await initWasm((file) => {\n      console.log(\"file\", file);\n      const wasmUrl = new URL(\n        `./assets/?unstable_path=${encodeURIComponent(\n          \"./../../node_modules/@vlcn.io/crsqlite-wasm/dist/crsqlite.wasm\"\n        )}&platform=web\"`,\n        import.meta.url\n      ).href;\n      console.log(\"wasmUrl\", wasmUrl);\n      return wasmUrl;\n    });\n\n    this.#db = await sqlite.open(this.#databaseName);\n\n    // debug\n    const two = await this.#db.execA(\"SELECT 1 + 1 AS result\");\n    console.log(\"two\", two[0]);\n  }\n\n  public isInTransactionAsync(): Promise<boolean> {\n    throw new Error(\"Unimplemented\");\n  }\n\n  public closeAsync(): Promise<void> {\n    throw new Error(\"Unimplemented\");\n  }\n\n  public execAsync(source: string): Promise<void> {\n    return this.#db!.exec(source);\n  }\n\n  public async prepareAsync(\n    nativeStatement: NativeStatement,\n    source: string\n  ): Promise<NativeStatement> {\n    if (this.#db === undefined) throw new Error(\"Database not initialized\");\n    const stmt = await this.#db.prepare(source);\n    const crSqliteStatement = new CrSqliteStatement(stmt);\n    return crSqliteStatement;\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public initSync(): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public isInTransactionSync(): boolean {\n    throw new Error(\"Unimplemented\");\n  }\n  public closeSync(): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public execSync(source: string): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public prepareSync(\n    nativeStatement: NativeStatement,\n    source: string\n  ): NativeStatement {\n    throw new Error(\"Unimplemented\");\n  }\n\n  //#endregion\n};\n\nconst CrSqliteStatement = class CrSqliteStatement implements NativeStatement {\n  isFinalized: Boolean = false;\n  #stmt?: StmtAsync;\n\n  constructor(stmt?: StmtAsync) {\n    this.#stmt = stmt;\n  }\n\n  public async runAsync(\n    database: SQLiteAnyDatabase,\n    bindParams: SQLiteBindPrimitiveParams,\n    bindBlobParams: SQLiteBindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<SQLiteRunResult & { firstRowValues: SQLiteColumnValues }> {\n    const res = this.#stmt?.get(database.nativeDatabase.tx, bindParams);\n    console.log(\"this.#stmt\", this.#stmt);\n    console.log(\"res\", res);\n    return res;\n  }\n  public stepAsync(\n    database: SQLiteAnyDatabase\n  ): Promise<SQLiteColumnValues | null | undefined> {\n    throw new Error(\"Unimplemented\");\n  }\n  public getAllAsync(\n    database: SQLiteAnyDatabase\n  ): Promise<SQLiteColumnValues[]> {\n    throw new Error(\"Unimplemented\");\n  }\n  public resetAsync(database: SQLiteAnyDatabase): Promise<void> {\n    throw new Error(\"Unimplemented\");\n  }\n  public getColumnNamesAsync(): Promise<SQLiteColumnNames> {\n    throw new Error(\"Unimplemented\");\n  }\n  public async finalizeAsync(database: SQLiteAnyDatabase): Promise<void> {\n    this.isFinalized = true;\n    this.#stmt?.finalize(database.nativeDatabase);\n    return;\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public runSync(\n    database: SQLiteAnyDatabase,\n    bindParams: SQLiteBindPrimitiveParams,\n    bindBlobParams: SQLiteBindBlobParams,\n    shouldPassAsArray: boolean\n  ): SQLiteRunResult & { firstRowValues: SQLiteColumnValues } {\n    throw new Error(\"Unimplemented\");\n  }\n  public stepSync(\n    database: SQLiteAnyDatabase\n  ): SQLiteColumnValues | null | undefined {\n    throw new Error(\"Unimplemented\");\n  }\n  public getAllSync(database: SQLiteAnyDatabase): SQLiteColumnValues[] {\n    throw new Error(\"Unimplemented\");\n  }\n  public resetSync(database: SQLiteAnyDatabase): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public getColumnNamesSync(): string[] {\n    throw new Error(\"Unimplemented\");\n  }\n  public finalizeSync(database: SQLiteAnyDatabase): void {\n    throw new Error(\"Unimplemented\");\n  }\n};\n\nexport default {\n  get name(): string {\n    return \"ExpoSQLiteNext\";\n  },\n\n  NativeDatabase: CrSqliteDatabase,\n  NativeStatement: CrSqliteStatement,\n\n  async deleteDatabaseAsync(databaseName: string): Promise<void> {\n    throw new Error(\"Unimplemented\");\n  },\n\n  deleteDatabaseSync(databaseName: string): void {\n    throw new Error(\"Unimplemented\");\n  },\n\n  //#region EventEmitter implementations\n\n  addListener() {\n    throw new Error(\"Unimplemented\");\n  },\n  removeListeners() {\n    throw new Error(\"Unimplemented\");\n  },\n\n  //#endregion\n};\n"]}