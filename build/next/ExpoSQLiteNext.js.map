{"version":3,"file":"ExpoSQLiteNext.js","sourceRoot":"","sources":["../../src/next/ExpoSQLiteNext.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeDatabase, SQLiteOpenOptions } from \"./NativeDatabase\";\nimport {\n  NativeStatement,\n  SQLiteAnyDatabase,\n  SQLiteBindBlobParams,\n  SQLiteBindPrimitiveParams,\n  SQLiteColumnNames,\n  SQLiteColumnValues,\n  SQLiteRunResult,\n} from \"./NativeStatement\";\nimport { IDBBatchAtomicVFS } from \"@vlcn.io/wa-sqlite/src/examples/IDBBatchAtomicVFS.js\";\nimport SQLiteESMFactory from \"@vlcn.io/wa-sqlite/dist/crsqlite.mjs\";\nimport * as SQLite from \"@vlcn.io/wa-sqlite\";\nimport { Mutex } from \"async-mutex\";\n\n/**\n *\n * WaSqliteDatabase\n *\n */\n\ntype WaSqliteDatabase = InstanceType<typeof WaSqliteDatabase>;\nconst WaSqliteDatabase = class WaSqliteDatabase implements NativeDatabase {\n  #databaseName: string;\n  #options?: SQLiteOpenOptions;\n  public api?: SQLiteAPI;\n  public pointer?: number; // database pointer\n  public cachedStatements: Map<number, NativeStatement> = new Map();\n  public mutex = new Mutex();\n\n  constructor(databaseName: string, options?: SQLiteOpenOptions) {\n    this.#databaseName = databaseName;\n    this.#options = options;\n  }\n\n  //#region Asynchronous API\n\n  public async initAsync(): Promise<void> {\n    const module = await SQLiteESMFactory({\n      locateFile(file) {\n        return `/assets/?unstable_path=${encodeURIComponent(\n          `./../../node_modules/@vlcn.io/wa-sqlite/dist/${file}`\n        )}&platform=web\"`;\n      },\n    });\n\n    this.api = SQLite.Factory(module);\n    this.api.vfs_register(\n      new IDBBatchAtomicVFS(\"idb-batch-atomic\", { durability: \"relaxed\" })\n    );\n\n    this.pointer = await this.api.open_v2(this.#databaseName);\n\n    // debug\n    // const two = await this.api.exec(this.pointer!, \"SELECT 1 + 1 AS result\");\n    // console.log(\"two\", two[0]);\n  }\n\n  public isInTransactionAsync(): Promise<boolean> {\n    throw new Error(\"Unimplemented\");\n  }\n\n  public async closeAsync(): Promise<void> {\n    // try maybeThrowForClosedDatabase(db)\n    if (this.pointer === undefined) throw new Error(\"Database not initialized\");\n    // for removedStatement in maybeRemoveAllCachedStatements(database: db) {\n    //   sqlite3_finalize(removedStatement.pointer)\n    // }\n    // TODO cache statements\n\n    // if db.openOptions.enableCRSQLite {\n    //   sqlite3_exec(db.pointer, \"SELECT crsql_finalize()\", nil, nil, nil)\n    // }\n    if (this.#options?.enableCRSQLite) {\n      const execRes = await this.api!.exec(\n        this.pointer!,\n        \"SELECT crsql_finalize()\"\n      );\n    }\n\n    for (const [stmt] of this.cachedStatements) {\n      const results = await this.api!.finalize(stmt);\n      this.cachedStatements.delete(stmt);\n    }\n\n    // // yield to the js event loop\n    // await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // let ret = sqlite3_close(db.pointer)\n    // db.isClosed = true\n    const ret = await this.api!.close(this.pointer!);\n\n    // TODO the native selft SQLiteModuleNext implements the following:\n    //   Store unmanaged (SQLiteModuleNext, Database) pairs for sqlite callbacks,\n    //   will release the pair when `closeDatabase` is called.\n\n    //\n    // if let index = contextPairs.firstIndex(where: {\n    //   guard let pair = $0.takeUnretainedValue() as? (SQLiteModuleNext, NativeDatabase) else {\n    //     return false\n    //   }\n    //   if pair.1.sharedObjectId != db.sharedObjectId {\n    //     return false\n    //   }\n    //   $0.release()\n    //   return true\n    // }) {\n    //   contextPairs.remove(at: index)\n    // }\n\n    // if ret != SQLITE_OK {\n    //   throw SQLiteErrorException(convertSqlLiteErrorToString(db))\n    // }\n    if (ret !== SQLite.SQLITE_OK) {\n      throw new Error(`Close failed with code ${ret}`);\n    }\n  }\n\n  public async execAsync(source: string): Promise<void> {\n    const release = await this.mutex.acquire();\n    await this.api!.exec(this.pointer!, source);\n    release();\n    return;\n  }\n\n  public async prepareAsync(\n    nativeStatement: WaSqliteStatement,\n    source: string\n  ): Promise<NativeStatement> {\n    if (this.pointer === undefined) throw new Error(\"Database not initialized\");\n    if (nativeStatement.isFinalized) throw new Error(\"Statement is finalized\");\n    const release = await this.mutex.acquire();\n    const db = this.pointer;\n    const str = this.api!.str_new(db, source);\n\n    try {\n      const sql = this.api!.str_value(str);\n      // yield to the js event loop\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      const prepared = await this.api!.prepare_v2(db, sql);\n      if (prepared == null) {\n        this.api!.str_finish(str);\n        throw new Error(`Could not prepare ${source}`);\n      }\n      // SQLiteDatabase doesn't use the returned statement and instead expects the input\n      // nativeStatement to be mutated.\n      nativeStatement.stmt = prepared.stmt;\n      // workaround for getColumnNamesAsync not taking database argument unlike the other methods\n      nativeStatement.database = this;\n\n      // add to cache\n      this.cachedStatements.set(prepared.stmt, nativeStatement);\n    } catch (error) {\n      throw error;\n    } finally {\n      this.api!.str_finish(str);\n    }\n    release();\n    return nativeStatement;\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public initSync(): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public isInTransactionSync(): boolean {\n    throw new Error(\"Unimplemented\");\n  }\n  public closeSync(): void {\n    this.closeAsync()\n      .then(() => {\n        return;\n      })\n      .catch((error) => {\n        throw error;\n      });\n  }\n  public execSync(source: string): void {\n    this.execAsync(source)\n      .then(() => {\n        return;\n      })\n      .catch((error) => {\n        throw error;\n      });\n  }\n  public prepareSync(\n    nativeStatement: NativeStatement,\n    source: string\n  ): NativeStatement {\n    throw new Error(\"Unimplemented\");\n  }\n\n  //#endregion\n};\n\n/**\n *\n * WaSqliteStatement\n *\n */\n\ntype WaSqliteStatement = InstanceType<typeof WaSqliteStatement>;\nconst WaSqliteStatement = class WaSqliteStatement implements NativeStatement {\n  public stmt?: number;\n  // workaround for getColumnNamesAsync not taking database argument unlike the other methods\n  public database?: WaSqliteDatabase;\n  isFinalized: Boolean = false;\n  // #str: number; // pointer to sql\n  // #stmt?: number;\n\n  // constructor(str: number, stmt?: StmtAsync) {\n  //   this.#str = str;\n  //   this.#stmt = stmt;\n  // }\n  // #sql: string;\n\n  // constructor(stmt?: number) {\n  //   this.stmt = stmt;\n  // }\n\n  public async runAsync(\n    database: WaSqliteDatabase,\n    bindParams: SQLiteBindPrimitiveParams,\n    bindBlobParams: SQLiteBindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<SQLiteRunResult & { firstRowValues: SQLiteColumnValues }> {\n    return await this.run(\n      database,\n      bindParams,\n      bindBlobParams,\n      shouldPassAsArray\n    );\n  }\n  public stepAsync(\n    database: WaSqliteDatabase\n  ): Promise<SQLiteColumnValues | null | undefined> {\n    return this.step(database);\n  }\n  public async getAllAsync(\n    database: WaSqliteDatabase\n  ): Promise<SQLiteColumnValues[]> {\n    return this.getAll(database);\n  }\n  public resetAsync(database: WaSqliteDatabase): Promise<void> {\n    throw new Error(\"Unimplemented\");\n  }\n\n  // workaround for getColumnNamesAsync not taking database argument unlike the other methods\n  public async getColumnNamesAsync(): Promise<SQLiteColumnNames> {\n    if (this.stmt === undefined) throw new Error(\"Statement not initialized\");\n    if (this.isFinalized) throw new Error(\"Statement is finalized\");\n    if (this.database?.api === undefined)\n      throw new Error(\"Database not initialized\");\n    return this.database.api!.column_names(this.stmt!);\n  }\n\n  public async finalizeAsync(database: WaSqliteDatabase): Promise<void> {\n    this.isFinalized = true;\n    await database.api!.finalize(this.stmt!);\n    // remove from cache\n    database.cachedStatements.delete(this.stmt!);\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public runSync(\n    database: SQLiteAnyDatabase,\n    bindParams: SQLiteBindPrimitiveParams,\n    bindBlobParams: SQLiteBindBlobParams,\n    shouldPassAsArray: boolean\n  ): SQLiteRunResult & { firstRowValues: SQLiteColumnValues } {\n    throw new Error(\"Unimplemented\");\n  }\n  public stepSync(\n    database: SQLiteAnyDatabase\n  ): SQLiteColumnValues | null | undefined {\n    throw new Error(\"Unimplemented\");\n  }\n  public getAllSync(database: SQLiteAnyDatabase): SQLiteColumnValues[] {\n    throw new Error(\"Unimplemented\");\n  }\n  public resetSync(database: SQLiteAnyDatabase): void {\n    throw new Error(\"Unimplemented\");\n  }\n  public getColumnNamesSync(): string[] {\n    throw new Error(\"Unimplemented\");\n  }\n  public finalizeSync(database: SQLiteAnyDatabase): void {\n    throw new Error(\"Unimplemented\");\n  }\n\n  //#endregion\n\n  public async step(\n    database: WaSqliteDatabase\n  ): Promise<SQLiteColumnValues | null | undefined> {\n    // private func step(statement: NativeStatement, database: NativeDatabase) throws -> SQLiteColumnValues? {\n    //   try maybeThrowForClosedDatabase(database)\n    //   try maybeThrowForFinalizedStatement(statement)\n    //   let ret = sqlite3_step(statement.pointer)\n    //   if ret == SQLITE_ROW {\n    //     return try getColumnValues(statement: statement)\n    //   }\n    //   if ret != SQLITE_DONE {\n    //     throw SQLiteErrorException(convertSqlLiteErrorToString(database))\n    //   }\n    //   return nil\n    // }\n    if (database.api === undefined) throw new Error(\"Database not initialized\");\n    if (this.stmt === undefined) throw new Error(\"Statement not initialized\");\n    const ret = await database.api.step(this.stmt!);\n    if (ret === SQLite.SQLITE_ROW) {\n      return await database.api.row(this.stmt!);\n    } else if (ret === SQLite.SQLITE_DONE) {\n      return null;\n    }\n    throw new Error(`Step failed with code ${ret}`);\n  }\n\n  public async getAll(\n    database: WaSqliteDatabase\n  ): Promise<SQLiteColumnValues[]> {\n    const release = await database.mutex.acquire();\n    if (database.api === undefined) throw new Error(\"Database not initialized\");\n    if (this.stmt === undefined) throw new Error(\"Statement not initialized\");\n    let columnValuesList: SQLiteColumnValues[] = [];\n    while (true) {\n      const ret = await database.api.step(this.stmt!);\n      if (ret === SQLite.SQLITE_ROW) {\n        columnValuesList.push(database.api.row(this.stmt!));\n        continue;\n      } else if (ret === SQLite.SQLITE_DONE) {\n        break;\n      }\n      throw new Error(`Step failed with code ${ret}`);\n    }\n    release();\n    return columnValuesList;\n  }\n\n  async run(\n    database: WaSqliteDatabase,\n    bindParams: SQLiteBindPrimitiveParams,\n    bindBlobParams: SQLiteBindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<SQLiteRunResult & { firstRowValues: SQLiteColumnValues }> {\n    const release = await database.mutex.acquire();\n    // try maybeThrowForClosedDatabase(database)\n    // try maybeThrowForFinalizedStatement(statement)\n\n    // sqlite3_reset(statement.pointer)\n    // sqlite3_clear_bindings(statement.pointer)\n    database.api!.reset(this.stmt!);\n\n    // for (key, param) in bindParams {\n    //   let index = try getBindParamIndex(statement: statement, key: key, shouldPassAsArray: shouldPassAsArray)\n    //   if index > 0 {\n    //     try bindStatementParam(statement: statement, with: param, at: index)\n    //   }\n    // }\n    // for (key, param) in bindBlobParams {\n    //   let index = try getBindParamIndex(statement: statement, key: key, shouldPassAsArray: shouldPassAsArray)\n    //   if index > 0 {\n    //     try bindStatementParam(statement: statement, with: param, at: index)\n    //   }\n    // }\n\n    for (const [index, value] of Object.entries(bindParams)) {\n      this.bind(database, this.stmt!, [value]);\n    }\n    // let ret = sqlite3_step(statement.pointer)\n    let stepResult;\n    try {\n      stepResult = await database.api!.step(this.stmt!);\n    } catch (error) {\n      throw error;\n    }\n    // if ret != SQLITE_ROW && ret != SQLITE_DONE {\n    //   throw SQLiteErrorException(convertSqlLiteErrorToString(database))\n    // }\n    // let firstRowValues: SQLiteColumnValues = (ret == SQLITE_ROW) ? try getColumnValues(statement: statement) : []\n    // return [\n    //   \"lastInsertRowId\": Int(sqlite3_last_insert_rowid(database.pointer)),\n    //   \"changes\": Int(sqlite3_changes(database.pointer)),\n    //   \"firstRowValues\": firstRowValues\n    // ]\n\n    if (stepResult !== SQLite.SQLITE_DONE && stepResult !== SQLite.SQLITE_ROW) {\n      throw new Error(`Step failed with code ${stepResult}`);\n    }\n    const firstRowValues =\n      stepResult === SQLite.SQLITE_ROW\n        ? await database.api!.row(this.stmt!)\n        : [];\n\n    const changes = database.api!.changes(database.pointer!);\n\n    // TODO Given that last_insert_rowid is not part of the api at this point we can\n    // use module._sqlite3_last_insert_rowid(db) instead.\n    // https://github.com/rhashimoto/wa-sqlite/discussions/151#discussioncomment-8233386\n\n    // const lastInsertRowId = database.api!.last_insert_rowid(database.pointer!);\n    release();\n    return { lastInsertRowId: 0, changes, firstRowValues };\n  }\n\n  bind(database: WaSqliteDatabase, stmt: number, values: unknown[]) {\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      database.api!.bind(\n        stmt,\n        i + 1,\n        typeof v === \"boolean\" ? (v && 1) || 0 : (v as any)\n      );\n    }\n  }\n};\n\nexport default {\n  get name(): string {\n    return \"ExpoSQLiteNext\";\n  },\n\n  NativeDatabase: WaSqliteDatabase,\n  NativeStatement: WaSqliteStatement,\n\n  async deleteDatabaseAsync(databaseName: string): Promise<void> {\n    throw new Error(\"Unimplemented\");\n  },\n\n  deleteDatabaseSync(databaseName: string): void {\n    throw new Error(\"Unimplemented\");\n  },\n\n  //#region EventEmitter implementations\n\n  addListener() {\n    throw new Error(\"Unimplemented\");\n  },\n  removeListeners() {\n    throw new Error(\"Unimplemented\");\n  },\n\n  //#endregion\n};\n"]}